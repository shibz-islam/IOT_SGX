from os import listdirfrom os.path import isfile, joinimport Helpersgx_path = "/home/shihab/sgx_projects/iot_sgx/experiments/"normal_path = "/home/shihab/CLionProjects/iot_analytics/experiments/"def get_timing_overhead():    print("timing ovrhead...")def get_execution_time():    print("calculating execution time...")    path = sgx_path    file_list = []    for f in listdir(path):        if isfile(join(path, f)) and 'execution_time' in f:            file_list.append(f)    print(file_list)    for filename in file_list:        filepath = join(path, filename)        data = Helper.read_data_from_file(filepath)        print("-------------------")        print("Filename: {0}, Total instances: {1}".format(filename, len(data)))        #print(data[0])        device_id = ""        count = 0        total_count = 0        total_time = 0        temp_time = 0        for line in data:            items = line.rstrip().split(";")            if len(items) == 3:                if (total_count>0 and items[1] != device_id) or total_count == len(data)-1:                    total_time += temp_time                    count += 1                device_id = items[1]                temp_time = int(items[2])                total_count += 1                #if total_count == 10000:                    #break        print("count={0}, total count={1}, total time={2}".format(count, total_count, total_time))        print("avg time = ", total_time / count)def get_execution_time_for_test():    path = "experiments/"    file_list = []    for f in listdir(path):        if isfile(join(path, f)):            file_list.append(f)    print(file_list)    for filename in file_list:        filepath = join(path, filename)        data = Helper.read_data_from_file(filepath)        print("-------------------")        print("Filename: {0}, Total instances: {1}".format(filename, len(data)))        newData = []        for i in range(10):            newData.extend(data)        data = newData        count = 0        total_time = 0        for line in data:            items = line.rstrip().split(",")            if len(items) == 3:                total_time += float(items[2])                count += 1        print("count={0}, total time={1}".format(count, total_time))        print("avg time = ", total_time / count)if __name__ == '__main__':    #get_execution_time()    #get_execution_time_for_test()    import matplotlib.pyplot as plt    import numpy as np    # Fixing random state for reproducibility    np.random.seed(19680801)    mu, sigma = 100, 15    x = mu + sigma * np.random.randn(50)    # the histogram of the data    n, bins, patches = plt.hist(x, 20, density=True, facecolor='g', alpha=0.75)    plt.xlabel('Smarts')    plt.ylabel('Probability')    plt.title('Histogram of IQ')    plt.text(60, .025, r'$\mu=100,\ \sigma=15$')    plt.xlim(40, 160)    plt.ylim(0, 0.03)    plt.grid(True)    plt.show()