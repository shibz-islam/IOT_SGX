/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;


    struct device {
         char* uid;
         char* type;
         char* state;
    };

    struct message {
         char* text;
         char* tag;
         size_t textLength;
         size_t tagLength;
    };

    struct Rule {
         char* deviceID;
         size_t deviceIDLength;
         char* rule;
         size_t ruleLength;
         char* tag;
         size_t tagLength;
         int isEncrypted;
         int count;
    };

    struct TimeRule{
        char *ruleID;
        char *rule;
        char *timeReference;
        int timeOffset;
        char *unit;
        int hour;
        int min;
    };

    struct ruleActionProperty{
        char* address;
        int type;
        char* msg;
        float value;
        char* tag;
    };

    struct RuleEvent{
        char *capability;
        char *attribute;
        char *value;
        char *valueType;
        char *unit;
        int isDevice;
    };

    struct DeviceEvent{
        char *deviceId;
        char *capability;
        char *attribute;
        char *value;
        char *valueType;
        char *unit;
    };

    struct DeviceCommand{
        char *deviceId;
        char *command;
    };


    /* define ECALLs here. */
    trusted {
    	public void ecall_initialize_enclave();

    	public void ecall_decrypt_message([user_check] struct message* msg);
    	public void ecall_decrypt_rule([user_check] struct message* msg);

        public void ecall_check_timer_rule(int hour, int min);
        public int ecall_check_pending_timer_rule(int hour, int min);
    };




    /*
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);

        void ocall_store_rules([user_check] Rule *rules, size_t numDevices);
        size_t ocall_get_rule_count([user_check] Rule *property, int isCountAll);
        size_t ocall_get_rules([user_check] Rule *ruleset, int len, [user_check] Rule *property, int isFetchAll);

        void ocall_send_alert_for_rule_action_email([user_check] struct ruleActionProperty *property);
        void ocall_send_alert_for_rule_action_device([user_check] struct ruleActionProperty *property);

        void ocall_log_execution_time([user_check] char *id);

    };

};
